#!/usr/bin/env ruby
# vim: set ts=2 sw=2

# This tool is a tool to generate user data and validate that data against a
# list of checksums. I aim to make it fully automate-able as well as easy
# enough for anyone to use.

require 'readline'
include Readline
require 'fileutils'
require 'optparse'
srand()

# print the usage menu for interactive mode
def print_menu
  print "\n"
  puts "Menu: "
  puts "gen\tGenerate data"
  puts "mksum\tGenerate checksums for data"
  puts "verify\tVerify data"
  puts "quit\tQuit"
  print "\n"
end

# menu to generate the large amounts of data interactive mode
def generate_data_interactively
  print "\n"
  puts "-- Press CTRL+C to cancel --"
  print "\n"

  begin
    puts "Where do you want to create the data? "
    loc = readline("> ", TRUE)

    puts "Minimum filesize in kilobytes? "
    minsize = readline("# ", TRUE).to_i

    puts "Maximum filesize in kilobytes? "
    maxsize = readline("# ", TRUE).to_i

    puts "Number of files? "
    filenum = readline("# ", TRUE).to_i

    puts "Number of directories? "
    dirnum = readline("# ", TRUE).to_i
  rescue Interrupt
    return
  rescue
    STDERR.puts "Error: #{$!}"
  end

  # files per directory
  fpd = filenum / dirnum

  print "\n"
  print "[+] Okay, let me make sure I get it right:\nYou want #{filenum} total "
  print "files to be put in #{dirnum} subdirectories, with sizes ranging "
  print "between #{minsize}kb and #{maxsize}kb."
  print "\n\n"
  print "This will put #{fpd} files in each directory.\n"
  print "All extra files will be rounded off\n"
  print "All these files will be in the '#{loc}' directory."
  print "\n\n"
  print "Are these settings correct?\n"

  begin
    confirm = readline("[y/n] ", TRUE)
  rescue Interrupt
    return
  rescue
    STDERR.puts "Error: #{$!}"
  end
  
  if confirm != "y"
    puts "Abort!"
    return
  end

  generate_data(loc, minsize, maxsize, filenum, dirnum)
end

# actually generate the data
def generate_data(loc, minsize, maxsize, filenum, dirnum)
  fpd = filenum / dirnum
  print "\n"
  puts "[+] Checking paramaters..."
  #if !File.exist?(loc) and !File.directory?(loc)
    #puts "\n[Error] File #{loc} doesn't exist or isn't a directory!"
    #return
  #end
  if minsize < 1 or maxsize < minsize or filenum < 1
    puts "\n[Error] I can't work with sizes like that!"
    return
  end
  if dirnum > filenum
    puts "\n[Error] Can't have more directories than files!"
    return
  end
  puts "[+] Checking to make sure you have dd..."
  system("which dd > /dev/null")
  if ($? != 0)
    puts "\n[Error] I can't find the 'dd' program!"
    return
  end

  puts "[+] Generating data..."

  fncount = 0

  for i in 0..(dirnum-1) do
    dname = loc + "/dir" + ("0"*(8-(i.to_s.length))).to_s + i.to_s
    puts "[+] Making #{dname} and populating it with data..."
    if File.directory?(dname)
      puts "directory #{dname} already exists, skipping"
    else
      begin
        FileUtils.mkdir_p(dname)
      rescue
        puts "[Error] Creating directory: #{$!}"
      end
    end

    for j in 0..(fpd-1) do
      fname = dname + "/file" + ("0"*(8-(fncount.to_s.length))).to_s + fncount.to_s
      fncount = fncount + 1
      fsize = minsize + rand(maxsize-minsize)
      begin
        system("dd if=/dev/urandom of=#{fname} bs=1024 count=#{fsize} 2> /dev/null")
      rescue
        puts "[Error] Creating file: #{$!}"
      end
      if $? != 0
        puts "There was an error creating '#{fname}'"
      end

    end

  end

  puts "[+] Done generating data."

end

# create checksums for data interactively
def create_checksums_interactively

  begin
    puts "What base directory do you want to start the chceksumming?? "
    loc = readline("> ", TRUE)

    puts "What file do you want to store the results in?? "
    outputfile = readline("> ", TRUE)
  rescue Interrupt
    return
  rescue
    STDERR.puts "Error: #{$!}"
  end

  print "\n"
  print "[+] Okay, let me make sure I get it right:\n"
  print "You want me to checksum all the files under '#{loc}', saving all\n"
  print "the results into a file called '#{outputfile}'."
  print "\n\n"
  print "Are these settings correct?\n"

  begin
    confirm = readline("[y/n] ", TRUE)
  rescue Interrupt
    return
  rescue
    STDERR.puts "Error: #{$!}"
  end
  
  if confirm != "y"
    puts "Abort!"
    return
  end

  create_checksums(loc,outputfile)

end

# create checksums for data
def create_checksums(dir, outputfile)
  md5prog = "md5"

  print "\n"
  puts "[+] Checking paramaters..."
  if !File.exist?(dir) and !File.directory?(dir)
    puts "\n[Error] File #{dir} doesn't exist or isn't a directory!"
    return
  end
  if File.exist?(outputfile)
    puts "\n[Error] Output file #{outputfile} already exists! In the interest of safety, I'm not going to clobber it..."
    return
  end

  puts "[+] Checking to make sure you have md5 or md5sum..."
  system("which md5 > /dev/null")
  if ($? != 0)
    puts "\n[Warning] I couldn't find the 'md5' program!"
    system("which md5sum > /dev/null")
    if ($? != 0)
      puts "\n[Error] I couldn't find the 'md5sum' program either!"
      return
    else
      md5prog = "md5sum"
    end
  end

  puts "[+] Checksumming data..."

  files = File.join("**", dir, "**", "*")

  Dir.glob(files) { |file|
    if !File.file?(file)
      next
    end
    begin
      system("#{md5prog} #{file} >> #{outputfile}")
    rescue
      puts "[Error] Checksumming file: #{$!}"
    end
    if $? != 0
      puts "There was an error checksumming '#{file}'"
    end
  }

  puts "[+] Done."

end

# verify data checksums interactively
def verify_checksums_interactively

  begin
    puts "What file contains all the md5sums? (the paths in this file must be correct)"
    loc = readline("> ", TRUE)

  rescue Interrupt
    return
  rescue
    STDERR.puts "Error: #{$!}"
  end

  print "\n"
  print "[+] Okay, let me make sure I get it right:\n"
  print "You want me to check all the files in '#{loc}' and make sure their\n"
  print "md5 sums match up."
  print "\n\n"
  print "Is this correct?\n"

  begin
    confirm = readline("[y/n] ", TRUE)
  rescue Interrupt
    return
  rescue
    STDERR.puts "Error: #{$!}"
  end

  if confirm != "y"
    puts "Abort!"
    return
  end

  verify_checksums(loc)

end

# verify data checksums
def verify_checksums(file)
  md5prog = "md5"

  print "\n"
  puts "[+] Checking paramaters..."
  if !File.exist?(file) and !File.file?(file)
    puts "\n[Error] File #{file} doesn't exist or isn't a file!"
    return false
  end
  if !File.readable?(file)
    puts "\n[Error] File #{file} isn't readable by me!"
    return false
  end

  puts "[+] Checking to make sure you have md5 or md5sum..."
  system("which md5 > /dev/null")
  if ($? != 0)
    puts "\n[Warning] I couldn't find the 'md5' program!"
    system("which md5sum > /dev/null")
    if ($? != 0)
      puts "\n[Error] I couldn't find the 'md5sum' program either!"
      return false
    else
      md5prog = "md5sum"
    end
  end

  puts "[+] Verify data with checksums..."

  diffcount = 0

  f = File.open(file)
  f.each { |line|
    # example line:
    #MD5 (files/dir00000004/file00000996) = dd6a86dcb73ab354ee6ae2c73105bea6
    if line =~ /\(([\s\S]+)\)\s=\s([\s\S]+)$/
      fn = $1
      sum = $2.chomp
      crc = `#{md5prog} #{fn}`
      crc =~ /\(([\s\S]+)\)\s=\s([\s\S]+)$/
      newsum = $2.chomp
      if sum != newsum
        puts "[!] File #{fn} is different! (expected: #{sum}, actual: #{newsum})"
        diffcount = diffcount + 1
      end
    else
      puts "Incorrectly formatted md5sum file!"
      return false
    end
  }

  puts "[+] Done. #{diffcount} files were different"

  return diffcount

end


dc = 0
# Main interaction loop
if ARGV.size < 1
  # interactive mode
  loop {
    print_menu()
    begin
      cmd = readline("ds> ", TRUE)
    rescue Interrupt 
      exit(0)
    rescue
      STDERR.puts "Error: #{$!}"
    end

    case cmd
    when "quit":
      puts "Bye!"
      exit(0)
    when "q":
      puts "Bye!"
      exit(0)
    when "gen":
      generate_data_interactively()
    when "mksum":
      create_checksums_interactively()
    when "verify":
      dc = verify_checksums_interactively()
    end
  }
  exit(dc)
end

# otherwise, parse command arguments
opts = {}
OptionParser.new do |o| 
  o.on("-g", "--generate", "Generate data") do |g|
    opts[:gen] = g
  end
  o.on("-c", "--checksum", "Create checksums") do |c|
    opts[:crc] = c
  end
  o.on("-v", "--verify", "Verify checksums") do |v|
    opts[:verify] = v
  end
end.parse!

if opts[:gen] and !opts[:crc] and !opts[:verify]
  if ARGV.length < 5
    puts "Not enough arguments for generate!"
    puts "\t./datasuite -g \"/path/for/data\" 1000 20 5 10"
    puts "\"Put 1000 files in 20 directories that are between 5 and 10 kb in size"
  else
    generate_data(ARGV[0],ARGV[3].to_i,ARGV[4].to_i,ARGV[1].to_i,ARGV[2].to_i)
  end
  exit(0)
end

if opts[:crc] and !opts[:gen] and !opts[:verify]
  if ARGV.length < 2
    puts "Not enough arguments for checksum!"
    puts "\t./datasuite -c \"/path/to/filedir\" \"/path/to/sums_output_file.txt\""
    puts "\"Generate checksums for all the files in /path/to/filedir, output to output file\""
  else
    create_checksums(ARGV[0],ARGV[1])
  end
  exit(0)
end

if opts[:verify] and !opts[:crc] and !opts[:gen]
  if ARGV.length < 1
    puts "Not enough arguments for verify!"
    puts "\t./datasuite -v \"/path/to/md5sumfile.txt\""
    puts "\"Validate all the files in /path/to/md5sumfile.txt.\"\nThis assumes the MD5 (/path/to/file) = 123.. is correct"
  else
    dc = verify_checksums(ARGV[0])
  end
  exit(dc)
end

puts "Um yea, you didn't run the script correctly, sorry!"
exit(255)
